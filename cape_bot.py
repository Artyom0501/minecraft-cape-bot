import telebot
import requests
import schedule
import time
import threading
import os
from http.server import HTTPServer, BaseHTTPRequestHandler
from bs4 import BeautifulSoup

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.environ.get('TELEGRAM_TOKEN')
ALLOWED_USERS = os.environ.get('ALLOWED_USERS', '').split(',')

bot = telebot.TeleBot(TOKEN)
known_capes = set()  # –•—Ä–∞–Ω–∏–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–ª–∞—â–µ–π –Ω–∞ Minecraft.net ===
def check_new_capes():
    global known_capes
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ Minecraft.net...")

    try:
        url = 'https://www.minecraft.net/ru-ru'
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')

        articles = soup.find_all('a', class_='card')
        new_found = False

        for article in articles:
            title = article.get_text(strip=True)
            href = article.get('href')
            link = 'https://www.minecraft.net' + href if href.startswith('/') else href

            if any(word in title.lower() for word in ['–ø–ª–∞—â', 'cape', '—Å–∫–∏–Ω', '–ø–æ–¥–∞—Ä–æ–∫']):
                if link not in known_capes:
                    known_capes.add(link)
                    new_found = True

                    for user_id in ALLOWED_USERS:
                        bot.send_message(
                            user_id,
                            f"üß• –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è:\n*{title}*\n{link}",
                            parse_mode="Markdown"
                        )

        if not new_found:
            print("–ù–æ–≤—ã—Ö –ø–ª–∞—â–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:", e)

# === –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç ===
schedule.every(30).minutes.do(check_new_capes)

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start', '–ø–ª–∞—â'])
def send_welcome(message):
    if str(message.chat.id) not in ALLOWED_USERS:
        return
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤—ã–µ –ø–ª–∞—â–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è!")

@bot.message_handler(commands=['ping'])
def ping_command(message):
    if str(message.chat.id) not in ALLOWED_USERS:
        return
    bot.send_message(message.chat.id, "üèì Pong!")

# === –ü—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
PORT = int(os.environ.get("PORT", 8000))

class SimpleHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running")

def run_server():
    server = HTTPServer(('0.0.0.0', PORT), SimpleHandler)
    print(f"üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    server.serve_forever()

# === –ó–∞–ø—É—Å–∫ ===
threading.Thread(target=run_server, daemon=True).start()
threading.Thread(target=run_schedule, daemon=True).start()

bot.polling()
