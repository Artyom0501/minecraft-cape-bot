import telebot
import requests
import schedule
import time
import threading
import os
from http.server import HTTPServer, BaseHTTPRequestHandler
from bs4 import BeautifulSoup

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.environ.get('TELEGRAM_TOKEN')
ALLOWED_USERS = os.environ.get('ALLOWED_USERS', '')
PORT = int(os.environ.get("PORT", 8000))

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö ID
allowed_users = [uid.strip() for uid in ALLOWED_USERS.split(',') if uid.strip().isdigit()]

bot = telebot.TeleBot(TOKEN)
known_capes = set()  # –•—Ä–∞–Ω–∏–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–ª–∞—â–µ–π –Ω–∞ Minecraft.net ===
def check_new_capes(triggered_by_command=False, trigger_user_id=None):
    global known_capes
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ Minecraft.net...")

    try:
        url = 'https://www.minecraft.net/ru-ru'
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')

        articles = soup.find_all('a', class_='card')
        new_found = False

        for article in articles:
            title = article.get_text(strip=True)
            href = article.get('href')
            link = 'https://www.minecraft.net' + href if href.startswith('/') else href

            if any(word in title.lower() for word in ['–ø–ª–∞—â', 'cape', '—Å–∫–∏–Ω', '–ø–æ–¥–∞—Ä–æ–∫']):
                if link not in known_capes:
                    known_capes.add(link)
                    new_found = True

                    for user_id in allowed_users:
                        bot.send_message(
                            int(user_id),
                            f"üß• –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è:\n*{title}*\n{link}",
                            parse_mode="Markdown"
                        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not new_found:
            for user_id in allowed_users:
                if triggered_by_command:
                    if str(user_id) == str(trigger_user_id):
                        bot.send_message(int(user_id), "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n–ù–æ–≤—ã—Ö –ø–ª–∞—â–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    bot.send_message(int(user_id), "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ Minecraft.net...\n–ù–æ–≤—ã—Ö –ø–ª–∞—â–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            print("‚úÖ –ù–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:", e)
        for user_id in allowed_users:
            if triggered_by_command and str(user_id) != str(trigger_user_id):
                continue
            bot.send_message(int(user_id), f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∞–π—Ç–∞: {e}")

# === –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç ===
schedule.every(30).minutes.do(check_new_capes)

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def is_allowed(user_id):
    return str(user_id) in allowed_users

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start', '–ø–ª–∞—â'])
def send_welcome(message):
    if not is_allowed(message.chat.id):
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        print(f"üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.chat.id}")
        return
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤—ã–µ –ø–ª–∞—â–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è!")

@bot.message_handler(commands=['ping'])
def ping_command(message):
    if not is_allowed(message.chat.id):
        return
    bot.send_message(message.chat.id, "üèì Pong!")

@bot.message_handler(commands=['check'])
def manual_check(message):
    if not is_allowed(message.chat.id):
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        print(f"‚õîÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ /check –æ—Ç: {message.chat.id}")
        return
    bot.send_message(message.chat.id, "üîç –í—ã–ø–æ–ª–Ω—è—é —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∞–π—Ç–∞ Minecraft.net...")
    threading.Thread(target=check_new_capes, kwargs={"triggered_by_command": True, "trigger_user_id": message.chat.id}).start()

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (—á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) ===
@bot.message_handler(func=lambda message: True)
def any_message(message):
    print(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.id} –Ω–∞–ø–∏—Å–∞–ª: {message.text}")

# === –ü—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
class SimpleHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running")

def run_server():
    server = HTTPServer(('0.0.0.0', PORT), SimpleHandler)
    print(f"üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    server.serve_forever()

# === –ó–∞–ø—É—Å–∫ ===
threading.Thread(target=run_server, daemon=True).start()
threading.Thread(target=run_schedule, daemon=True).start()

bot.polling()
